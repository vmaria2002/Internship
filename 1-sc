//javac ServerConsole.java
//java ServerConsole

// This file contains material supporting section 3.7 of the textbook:
// "Object Oriented Software Engineering" and is issued under the open-source
// license found at www.lloseng.com 

import java.io.*;
import client.*;
import common.*;
//trebuie incluse
import ocsf.server.*;
import common.ChatIF;

/**
 * This class constructs the UI for a chat client.  It implements the
 * chat interface in order to activate the display() method.
 * Warning: Some of the code here is cloned in ServerConsole 
 *
 * @author Fran&ccedil;ois B&eacute;langer
 * @author Dr Timothy C. Lethbridge  
 * @author Dr Robert Lagani&egrave;re
 * @version July 2000
 */
 //trebuie extind AbstractServer
 
public class ServerConsole extends AbstractServer implements ChatIF
{

boolean asteapta=true;
  //trebuiw suprascrisa aceasta metoda intrucat extindem o clasa abstracta
   public void handleMessageFromClient
    (Object msg, ConnectionToClient client)
    {
        if (msg == null){
            System.out.println("Client disconnected");
        }else{
         
            System.out.println("Message received: " + msg + " from " + client);
            this.sendToAllClients(msg);
        
        }
    }

  //Class variables *************************************************
  
  /**
   * The default port to connect on.
   */
  final public static int DEFAULT_PORT = 5555;
  
  //Instance variables **********************************************
  
  /**
   * The instance of the client that created this ConsoleChat.
   */
 

  
  //Constructors ****************************************************

  /**
   * Constructs an instance of the ClientConsole UI.
   *
   * @param host The host to connect to.
   * @param port The port to connect on.
   */
  public ServerConsole(int port) 
  {
    
    super(port);
    
   
  }
   /**
   * This method terminates the client.
   */
   //**************************** */
  public void quit()
  {
    //metoda pentru inchis conexiunea server-ului
    serverStopped();
    System.exit(0);
  }

  public void accept() 
  {
    
     String serverPointer = new String("Server Msg > ");
    try
    {
      BufferedReader fromConsole = 
        new BufferedReader(new InputStreamReader(System.in));
      String message;

      while (true) 
      {
         System.out.print(">");
        message = fromConsole.readLine();
        display(message);  //*
        //metoda din abstract setver
        sendToAllClients(serverPointer+message);
        // server.handleMessageFromServerUI(message); //*
        // 
      }
    } 
    catch (Exception ex) 
    {
      System.out.println
        ("Unexpected error while reading from console!");
    }
  }

///serverClosed


  /**
   * This method override2s the method in the ChatIF interface.  It
   * displays a message onto the screen.
   *
   * @param message The string to be displayed.
   */
 
 //************************************************** */
  public void display(String message) 
  {
      System.out.println("SERVER MSG>" + message);//*
      char l=message.charAt(0);
      String command = message.substring(1);
      // sendToServer(message);
      if(l=='#'){
      System.out.println("S-a detectata comanda #");
     
      if(command.equals("quit")){
        sendToAllClients("causes the server to quit gracefully");
         System.out.print("Se va inchide server-ul..");
         //din AbstractServer.java
          serverStopped();
          System.exit(0);
          
         
       }

       if(command.equals("stop")){
         sendToAllClients("causes the server to stop listening for new clients.");
         System.out.print("Se va inchide server-ul..");
         stopListening();
          
       }
      if(command.equals("close")){
         sendToAllClients("causes the server not only to stop listening for new clients, but also to disconnect all existing clients.");
         System.out.print("Se va inchide server-ul..");
        
        serverClosed();
      }
      if(command.equals("start")){
         sendToAllClients("S-a creeazt conexiunea:");
         System.out.print("Se va inchide server-ul..");
         serverStarted();
      }
     if(command.equals("getport")){
         sendToAllClients("S-a creeazt conexiunea:");
         int p=getPort();
         System.out.print("portul: "+ p);
      }
      String rez[] = command.split(" ");

          if(rez[0].equals("setport")){
              setPort(Integer.parseInt(rez[1]));    
          }
       }


      
  }
  
  
  //Class methods ***************************************************
  /**
   * This method is responsible for the creation of the Client UI.
   *
   * @param args[0] The host to connect to.
   */
 public static void main(String[] args)
    {
        int port = 0; //Port to listen on

        try
        {
            port = Integer.parseInt(args[0]); //Get port from command line
        }
        catch(Throwable t)
        {
            port = DEFAULT_PORT; //Set port to 5555
        }

        ServerConsole sv = new ServerConsole(port);
        sv.display("ok");
        System.out.println("s-a deschis c=server-ul!"+port);
     
        try
        {
            sv.listen(); //Start listening for connections
        }
        catch (Exception ex)
        {
            System.out.println("ERROR - Could not listen for clients!");
        }

        //ServerConsole chat= new ServerConsole(port);
        sv.accept();
    }
}
//End of ConsoleChat class
