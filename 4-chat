// This file contains material supporting section 3.7 of the textbook:
// "Object Oriented Software Engineering" and is issued under the open-source
// license found at www.lloseng.com 

package client;

import ocsf.client.*;
import common.*;
import java.io.*;

/**
 * This class overrides some of the methods defined in the abstract
 * superclass in order to give more functionality to the client.
 *
 * @author Dr Timothy C. Lethbridge
 * @author Dr Robert Lagani&egrave;
 * @author Fran&ccedil;ois B&eacute;langer
 * @version July 2000
 */
public class ChatClient extends AbstractClient
{
  //Instance variables **********************************************
  
  /**
   * The interface type variable.  It allows the implementation of 
   * the display method in the client.
   */
  ChatIF clientUI; 

  
  //Constructors ****************************************************
  
  /**
   * Constructs an instance of the chat client.
   *
   * @param host The server to connect to.
   * @param port The port number to connect on.
   * @param clientUI The interface type variable.
   */
  
  public ChatClient(String host, int port, ChatIF clientUI) 
    throws IOException 
  {
    super(host, port); //Call the superclass constructor
    this.clientUI = clientUI;
    openConnection();
  }

  
  //Instance methods ************************************************
    
  /**
   * This method handles all data that comes in from the server.
   *
   * @param msg The message from the server.
   */
  public void handleMessageFromServer(Object msg) 
  {
    clientUI.display(msg.toString());
  }

  /**
   * This method handles all data coming from the UI            
   *
   * @param message The message from the UI.    
   */
  public void handleMessageFromClientUI(String message)
  {
    try
    {
      char l=message.charAt(0);
      String command = message.substring(1);
     // sendToServer(message);
      if(l=='#'){
          sendToServer("S-a inserat comanda "+message);
          if(command.equals("quit")){
            clientUI.display  ("S-a identificat comanda "+  command);
            quit();
          }
          if(command.equals("logoff")){
            clientUI.display  ("S-a identificat comanda "+  command);
            closeConnection();
        }

        String []comandaSplit = command.split(" ");
        if(comandaSplit[0].equals("sethost")){
        clientUI.display  ("S-a identificat comanda "+  comandaSplit[1]);
        System.out.println(comandaSplit[1]);
        setHost( comandaSplit[1]);
      }

      if(comandaSplit[0].equals("setport")){
        clientUI.display  ("S-a identificat comanda "+  comandaSplit[1]);
        System.out.println(comandaSplit[1]);
        setPort(Integer.parseInt(comandaSplit[1]));
      }
      if((command.equals("login"))){
        if(isConnected()){
          connectionClosed(); 
          System.out.println("ezista deja nexiunea");  
        }else{
          openConnection();
        }

      }

      if(command.equals("gethost")){
        String nume =getHost();
        clientUI.display ("Nume Host "+ nume);

      }
     
      if(command.equals("getport")){
        int i=getPort();
        clientUI.display ("Port Host "+ i);

      }
     
   }else{
          sendToServer(message);
        }   
  
    }
    catch(IOException e)
    {
      clientUI.display ("Could not send message to server.  Terminating client.");
      quit();
    }

//#quit...(implementat) cu of else


  }
  
  /**
   * This method terminates the client.
   */
  public void quit()
  {
    try
    {
      closeConnection();
    }
    catch(IOException e) {}
    System.exit(0);
  }

//
protected void connectionException(Exception exception) {
  clientUI.display("Server deconectat.");
  quit();
}
}



//End of ChatClient class
